#include <WiFi.h>
#include <PubSubClient.h>

// Wi-Fi настройки
const char* ssid = "VM5092273";
const char* password = "wn4chLxjQbtg";

// MQTT настройки
const char* mqttServer = "192.168.0.82";
const int mqttPort = 1883;
const char* mqttUser = "";
const char* mqttPassword = "";

// Пины
const int relayPin = 23;
const int buttonPin = 22;

WiFiClient espClient;
PubSubClient client(espClient);

bool lastRelayState = LOW;
bool isMqttConnected = false;

void setup() {
  Serial.begin(115200);
  pinMode(relayPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);

  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi");

  client.setServer(mqttServer, mqttPort);
  client.setCallback(mqttCallback);

  Serial.println("Attempting to connect to MQTT...");
  reconnect();

  if (client.connected()) {
    // MQTT Discovery для Home Assistant
    const char* discoveryTopic = "homeassistant/switch/esp32_relay1/config";
    const char* discoveryPayload = 
      "{\"name\":\"ESP32 Relay\","
      "\"state_topic\":\"esp32/relay1/state\","
      "\"command_topic\":\"esp32/relay1/set\","
      "\"payload_on\":\"1\","
      "\"payload_off\":\"0\","
      "\"unique_id\":\"esp32_relay1\"}";

    client.publish(discoveryTopic, discoveryPayload, true);
    Serial.println("Sent MQTT discovery config");

    // Отправка текущего состояния реле
    bool relayState = digitalRead(relayPin);
    if (relayState == LOW) {
      client.publish("esp32/relay1/state", "1", true);
      Serial.println("Published initial relay state: 1");
    } else {
      client.publish("esp32/relay1/state", "0", true);
      Serial.println("Published initial relay state: 0");
    }

    lastRelayState = relayState;
  }
}

void reconnect() {
  if (!client.connected()) {
    while (!client.connected()) {
      Serial.print("Attempting MQTT connection, state: ");
      Serial.println(client.state());

      if (client.connect("ESP32Client", mqttUser, mqttPassword)) {
        Serial.println("Connected to MQTT");
        client.subscribe("esp32/relay1/set");
        isMqttConnected = true;
      } else {
        Serial.print("Failed, rc=");
        Serial.print(client.state());
        Serial.println(" try again in 5 seconds");
        delay(5000);
      }
    }
  }
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  if (strcmp(topic, "esp32/relay1/set") == 0) {
    char message[length + 1];
    memcpy(message, payload, length);
    message[length] = '\0';

    Serial.print("MQTT command received: ");
    Serial.println(message);

    if (strcmp(message, "1") == 0) {
      digitalWrite(relayPin, LOW);
      Serial.println("Relay ON");
      client.publish("esp32/relay1/state", "1", true);
      lastRelayState = LOW;
    } else if (strcmp(message, "0") == 0) {
      digitalWrite(relayPin, HIGH);
      Serial.println("Relay OFF");
      client.publish("esp32/relay1/state", "0", true);
      lastRelayState = HIGH;
    } else {
      Serial.println("Invalid command");
    }
  }
}

void loop() {
  if (!client.connected()) {
    isMqttConnected = false;
    Serial.println("Lost MQTT connection, reconnecting...");
    reconnect();
  }

  client.loop();

  int buttonState = digitalRead(buttonPin);
  if (buttonState == LOW) {
    Serial.println("Button pressed - toggling relay");
    bool currentState = !digitalRead(relayPin);
    digitalWrite(relayPin, currentState);
    delay(500); // дебаунс

    if (isMqttConnected && currentState != lastRelayState) {
      if (currentState == LOW) {
        client.publish("esp32/relay1/state", "1", true);
        Serial.println("Published state: 1");
      } else {
        client.publish("esp32/relay1/state", "0", true);
        Serial.println("Published state: 0");
      }
      lastRelayState = currentState;
    }
  }

  delay(100);
}
